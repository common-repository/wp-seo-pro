<?php class Text{ protected static $blnMbstring = null; protected static $clean = array(); public static function cleanText($strText) { if (is_bool($strText)) { return ''; } $key = sha1($strText); if (isset(self::$clean[$key])) { return self::$clean[$key]; } $strText = utf8_decode($strText); $strText = str_replace( array( "\xe2\x80\x98", "\xe2\x80\x99", "\xe2\x80\x9c", "\xe2\x80\x9d", "\xe2\x80\x93", "\xe2\x80\x94", "\xe2\x80\xa6" ), array( "'", "'", '"', '"', '-', '--', '...' ), $strText ); $strText = str_replace( array( chr(145), chr(146), chr(147), chr(148), chr(150), chr(151), chr(133) ), array( "'", "'", '"', '"', '-', '--', '...' ), $strText ); $strText = preg_replace('`([^0-9][0-9]+)\.([0-9]+[^0-9])`mis', '${1}0$2', $strText); $strText = preg_replace('`<script(.*?)>(.*?)</script>`is', '', $strText); $strText = preg_replace('`\</?(address|blockquote|center|dir|div|dl|dd|dt|fieldset|form|h1|h2|h3|h4|h5|h6|menu|noscript|ol|p|pre|table|ul|li)[^>]*>`is', '.', $strText); $strText = html_entity_decode($strText); $strText = strip_tags($strText); $strText = preg_replace('`(\r\n|\n\r)`is', "\n", $strText); $strText = preg_replace('`(\r|\n){2,}`is', ".\n\n", $strText); $strText = preg_replace('`[ ]*(\n|\r\n|\r)[ ]*`', ' ', $strText); $strText = preg_replace('`[",:;()/\`-]`', ' ', $strText); $strText = trim($strText, '. ') . '.'; $strText = preg_replace('`[\.!?]`', '.', $strText); $strText = preg_replace('`([\.\s]*\.[\.\s]*)`mis', '. ', $strText); $strText = preg_replace('`[ ]+`', ' ', $strText); $strText = preg_replace('`([\.])[\. ]+`', '$1', $strText); $strText = trim(preg_replace('`[ ]*([\.])`', '$1 ', $strText)); $strText = preg_replace_callback('`\. [^\. ]`', create_function('$matches', 'return strtolower($matches[0]);'), $strText); $strText = trim($strText); self::$clean[$key] = $strText; return $strText; } public static function lowerCase($strText, $strEncoding = '') { if (is_null(self::$blnMbstring)) { self::$blnMbstring = extension_loaded('mbstring'); } if (!self::$blnMbstring) { $strLowerCaseText = strtolower($strText); } else { if ($strEncoding == '') { $strLowerCaseText = mb_strtolower($strText); } else { $strLowerCaseText = mb_strtolower($strText, $strEncoding); } } return $strLowerCaseText; } public static function upperCase($strText, $strEncoding = '') { if (is_null(self::$blnMbstring)) { self::$blnMbstring = extension_loaded('mbstring'); } if (!self::$blnMbstring) { $strUpperCaseText = strtoupper($strText); } else { if ($strEncoding == '') { $strUpperCaseText = mb_strtoupper($strText); } else { $strUpperCaseText = mb_strtoupper($strText, $strEncoding); } } return $strUpperCaseText; } public static function substring($strText, $intStart, $intLength, $strEncoding = '') { if (is_null(self::$blnMbstring)) { self::$blnMbstring = extension_loaded('mbstring'); } if (!self::$blnMbstring) { $strSubstring = substr($strText, $intStart, $intLength); } else { if ($strEncoding == '') { $strSubstring = mb_substr($strText, $intStart, $intLength); } else { $strSubstring = mb_substr($strText, $intStart, $intLength, $strEncoding); } } return $strSubstring; } public static function textLength($strText, $strEncoding = '') { if (is_null(self::$blnMbstring)) { self::$blnMbstring = extension_loaded('mbstring'); } if (!self::$blnMbstring) { $intTextLength = strlen($strText); } else { if ($strEncoding == '') { $intTextLength = mb_strlen($strText); } else { $intTextLength = mb_strlen($strText, $strEncoding); } } return $intTextLength; } public static function characterCount($strText, $strEncoding = '') { return self::textLength($strText, $strEncoding); } public static function letterCount($strText, $strEncoding = '') { if (strlen(trim($strText)) == 0) { return 0; } if (is_null(self::$blnMbstring)) { self::$blnMbstring = extension_loaded('mbstring'); } $strText = self::cleanText($strText); $intTextLength = 0; $strText = preg_replace('`[^A-Za-z]+`', '', $strText); try { if (!self::$blnMbstring) { throw new \Exception('The extension mbstring is not loaded.'); } if ($strEncoding == '') { $intTextLength = mb_strlen($strText); } else { $intTextLength = mb_strlen($strText, $strEncoding); } } catch (\Exception $e) { $intTextLength = strlen($strText); } return $intTextLength; } public static function wordCount($strText, $strEncoding = '') { if (strlen(trim($strText)) == 0) { return 0; } $intWords = 1 + self::textLength(preg_replace('`[^ ]`', '', $strText), $strEncoding); return $intWords; } public static function sentenceCount($strText, $strEncoding = '') { if (strlen(trim($strText)) == 0) { return 0; } $intSentences = max(1, self::textLength(preg_replace('`[^\.!?]`', '', $strText), $strEncoding)); return $intSentences; } public static function averageWordsPerSentence($strText, $strEncoding = '') { $intSentenceCount = self::sentenceCount($strText, $strEncoding); $intWordCount = self::wordCount($strText, $strEncoding); $averageWords = (Maths::bcCalc($intWordCount, '/', $intSentenceCount)); return $averageWords; } } 