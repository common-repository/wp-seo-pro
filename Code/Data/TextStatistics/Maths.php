<?php class Maths{ protected static $blnBcmath = null; public static function normaliseScore($score, $min, $max, $dps = 1) { if ($score > $max) { $score = $max; } elseif ($score < $min) { $score = $min; } $score = self::bcCalc($score, '+', 0, true, $dps); return $score; } public static function bcCalc($number1, $action, $number2, $round = false, $decimals = 0, $precision = 10) { if (!is_scalar($number1) || !is_scalar($number2)) { return false; } if (is_null(self::$blnBcmath)) { self::$blnBcmath = extension_loaded('bcmath'); } if (self::$blnBcmath) { $number1 = strval($number1); $number2 = strval($number2); } $action = self::normaliseOperator($action); return self::performCalc($number1, $action, $number2, $round, $decimals, $precision); } public static function normaliseOperator($operator) { switch ($operator) { case 'add': case 'addition': $operator = '+'; break; case 'sub': case 'subtract': $operator = '-'; break; case 'mul': case 'multiply': $operator = '*'; break; case 'div': case 'divide': $operator = '/'; break; case 'mod': case 'modulus': $operator = '%'; break; case 'comp': case 'compare': $operator = '='; break; } return $operator; } private static function performCalc($number1, $action, $number2, $round, $decimals, $precision) { $result = null; $compare = false; switch ($action) { case '+': $result = (self::$blnBcmath) ? bcadd($number1, $number2, $precision) : ($number1 + $number2); break; case '-': $result = (self::$blnBcmath) ? bcsub($number1, $number2, $precision) : ($number1 - $number2); break; case '*': $result = (self::$blnBcmath) ? bcmul($number1, $number2, $precision) : ($number1 * $number2); break; case 'sqrt': $result = (self::$blnBcmath) ? bcsqrt($number1, $precision) : sqrt($number1); break; case '/': if ($number2 > 0) { if (self::$blnBcmath) { $result = bcdiv($number1, $number2, $precision); } else if ($number2 != 0) { $result = $number1 / $number2; } } if (!isset($result)) { $result = 0; } break; case '%': if (self::$blnBcmath) { $result = bcmod($number1, $number2); } else if ($number2 != 0) { $result = $number1 % $number2; } if (!isset($result)) { $result = 0; } break; case '=': $compare = true; if (self::$blnBcmath) { $result = bccomp($number1, $number2, $precision); } else { $result = ($number1 == $number2) ? 0 : (($number1 > $number2) ? 1 : -1); } break; } if (isset($result)) { if ($compare === false) { if ($round === true) { $result = round(floatval($result), $decimals); if ($decimals === 0) { $result = (int) $result; } } else { $result = (intval($result) == $result) ? intval($result) : floatval($result); } } return $result; } return false; } } 